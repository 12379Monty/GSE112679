```{r GlobalOptions, results="hide", include=FALSE, cache=FALSE}
knitr::opts_knit$set(stop_on_error = 2L) #really make it stop
#knitr::dep_auto()
```
<!-- ######################################################################## -->


```{r Prelims, include=FALSE, echo=FALSE, results='hide', message=FALSE,cache=F}

 FN <- "getGSEData"
if(sum(grepl(FN, list.files()))==0) stop("Check FN")

 PREFIX <- ""

 suppressPackageStartupMessages(require(methods))
 suppressPackageStartupMessages(require(rmarkdown))
 suppressPackageStartupMessages(require(bookdown))

 suppressPackageStartupMessages(require(knitr))
 options(stringsAsFactors=F)

 suppressPackageStartupMessages(require(data.table)) 
 options(datatable.fread.datatable=F)

 suppressPackageStartupMessages(require(plyr))
 suppressPackageStartupMessages(require(dplyr))
 suppressPackageStartupMessages(require(magrittr))

 # Shotcuts for knitting and redering while in R session (Invoke interactive R from R/Scripts folder)
 kk <- function(n='') knitr::knit2html(paste("t", n, sep=''), envir=globalenv(),
       output=paste(FN,".html", sep=''))

 rr <- function(n='') rmarkdown::render(paste("t", n, sep=''), envir=globalenv(),
       output_file=paste(FN,".html", sep='')) ##, output_dir='Scripts')

 bb <- function(n='') browseURL(paste(FN,".html", sep=''))

 # The usual shotcuts
 zz <- function(n='') source(paste("t", n, sep=''))

 # Using relative paths:
 # Assuming script is run from GSE112679/data-raw/
 WRKDIR <- ('..')

 # Not needed if path is relative ...
 if(!file.exists(WRKDIR)) stop("WRKDIR ERROR: ", WRKDIR)

 # do once
 #setwd(WRKDIR)

 # file rmarkdown file management options: cache, figures
 cache_DIR <- file.path('cache/rdGEData/')
 suppressPackageStartupMessages(dir.create(cache_DIR, recursive=T))
 opts_chunk$set(cache.path=cache_DIR)

 figure_DIR <- file.path('figures/rdGEData/')
 suppressPackageStartupMessages(dir.create(figure_DIR, recursive=T))
 opts_chunk$set(fig.path=paste0(figure_DIR, PREFIX))

 data_DIR <- '../data'
 if(!file.exists(data_DIR)) stop("data_DIR ERROR: ", data_DIR)


```
<!-- ######################################################################## -->


*** 

# Abstract

This script assembles R object from data downloaded from 
[NCBI/Gene Expression Omnibus Database (GSE112679)](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE112679).
The R objects will be assembled into an R dat package for
easy access.  The objects are constructed to parallel the
analyses of these data are reported in
Cai et al. (2019) [@Cai:2019aa]).  



# Set Analysis Parameters
 
```{r setAnalysisParameters, echo=T, cache=F}

 GSE_ID <- 'GSE112679'

 # extData
 ################################
 if(file.exists(file.path('../../extData'))) 
 EXT_DIR <- file.path('../../extData') else stop("Speficy EXT_DIR")

 # GSE_Data
 ###################################
 if(file.exists(file.path(EXT_DIR, GSE_ID)))
 GSE_DATA_DIR <- file.path(EXT_DIR,GSE_ID) else stop("Speficy GSE_DATA_DIR")

 # SampleDesc
 ###################################
 if(file.exists(file.path(GSE_DATA_DIR, paste0(GSE_ID,'_series_matrix.txt'))))
 SAMPLE_DESC_FILE <- file.path(GSE_DATA_DIR, paste0(GSE_ID,'_series_matrix.txt')) else 
 stop("Speficy SAMPLE_DESC_FILE")
 
```

```{r readSeqData.f, cache=F}
# Define utility function
readSeqData.f <- function(seqFile, Verbose=F){
 seqFile.frm <- fread(seqFile)
 names(seqFile.frm) <- c('GeneId','Chr', 'Start', 'End', 'Strand', 'Length', 'Count')

 # Reformat for ordering
 seqFile.frm$Chr <- 
  as.character(factor(seqFile.frm$Chr,
               levels=paste0('chr', c(1:22,'X','Y','M')),
               labels=paste0('chr', c(formatC(1:22,width=2,flag='0'),'X','Y','M'))))

 rownames(seqFile.frm) <-
 with(seqFile.frm, 
       paste(Chr, Strand, Start, End, GeneId, sep='~'))

 seqFile.frm <- seqFile.frm[,-(1:6),drop=F]
 if(Verbose) print(seqFile.frm[1:6,,drop=F])
 if(Verbose) print(dim(seqFile.frm))

 seqFile.frm}

```


## Get Sample Description Data

```{r readSampDesc,cache=T, cach.vars='sampDesc', eval=T, echo=T, fig.height=6, fig.width=11}

# kelly's colors - https://i.kinja-img.com/gawker-media/image/upload/1015680494325093012.JPG
 # https://gist.github.com/ollieglass/f6ddd781eeae1d24e391265432297538
 #KellyColors.vec <-  see web site
 # REMOVED '#F2F3F4' in first entry
 col_vec <-  c('#222222', '#F3C300', '#875692', '#F38400', '#A1CAF1', 
              '#BE0032', '#C2B280', '#848482', '#008856', '#E68FAC', '#0067A5',
              '#F99379', '#604E97', '#F6A600', '#B3446C', '#DCD300', '#882D17',
              '#8DB600', '#654522', '#E25822', '#2B3D26')

 suppressPackageStartupMessages(require(GEOquery))

 GSEMatrix_obj <- getGEO(GSE_ID, GSEMatrix=T)
 show(GSEMatrix_obj)

 #DT::datatable(pData(phenoData(GSEMatrix_obj[[1]])))

 KEY_FIELDS <- grep(':ch1$', names(pData(phenoData(GSEMatrix_obj[[1]]))), value=T)

 sampType_vec <- sapply(
 strsplit(as.character(pData(phenoData(GSEMatrix_obj[[1]]))[,"title"]), 
 split='_'), function(X) X[1])

 sampNo_vec <- sapply(
 strsplit(as.character(pData(phenoData(GSEMatrix_obj[[1]]))[,"title"]), 
 split='_'), function(X) X[2])

 bioSamples_vec <- sapply(
 strsplit(as.character(pData(phenoData(GSEMatrix_obj[[1]]))[,"relation"]), 
 split='/'), function(X) rev(X)[1])

 SRA_vec <- sapply(
 strsplit(as.character(pData(phenoData(GSEMatrix_obj[[1]]))[,"relation.1"]), 
 split='='), function(X) rev(X)[1])

 fileName_vec <- sapply(
 strsplit(as.character(pData(phenoData(GSEMatrix_obj[[1]]))[,"supplementary_file_1"]), 
 split='/'), function(X) rev(X)[1])

 sampDesc <- data.frame(
   geoAcc=pData(phenoData(GSEMatrix_obj[[1]]))[,"geo_accession"],
   title=pData(phenoData(GSEMatrix_obj[[1]]))[,"title"],
   sampType=sampType_vec,
   sampNo=sampNo_vec,
   bioSample=bioSamples_vec, 
   SRA=SRA_vec,
   fileName=fileName_vec,
   pData(phenoData(GSEMatrix_obj[[1]]))[, KEY_FIELDS])

 names(sampDesc) <- 
 sub('bclc.stage.ch1', 'stage',
 sub('diagnosis.ch1', 'Dx',
 sub('tissue.subtype.ch1', 'tissueSubtype',
 sub('tissue.ch1', 'tissue',
 sub('training.validation.group.ch1', 'trainValGroup',
 names(sampDesc))))))

 # Make sure fileName and geoAcc match
 fileNamegeoAcc.vec <- sapply(
 strsplit(as.character(sampDesc$fileName), split='_'), '[',1)
 if(sum(fileNamegeoAcc.vec!= sampDesc$geoAcc))
 stop("geoAcc/fileName Mismatch")

 str(sampDesc)
 
 cat("geoAcc is unique - use as rownames:\n")
 with(sampDesc, table(table(geoAcc, exclude=NULL)))
 rownames(sampDesc) <- sampDesc$geoAcc
 
 cat("SRA is unique:\n")
 with(sampDesc, table(table(SRA, exclude=NULL)))
 
 cat("bioSample is unique:\n")
 with(sampDesc, table(table(bioSample, exclude=NULL)))
 
 cat("title is unique:\n")
 with(sampDesc, table(table(title, exclude=NULL)))

 cat("Some Samples Match bu sampNo:")
 with(sampDesc, table(table(sampNo, exclude=NULL)))

 # NOTE: examination of the data indicate that sampNo cannot be used
 # to match Blood with TU or TI samples

DEPRICATED <- function() {
 NoSamp.tbl <- with(sampDesc, table(sampNo, exclude=NULL))

 sampDesc <- merge(
  data.frame(sampNo=names(nSamp.tbl), nSamp=as.vector(nSamp.tbl)),
  sampDesc, by='sampNo', all.y=T)
}#DEPRICATED

 sampDesc <- sampDesc[with(sampDesc,
  order(as.numeric(sampNo), title)),]


 # Shorten trainValGroup
 sampDesc$trainValGroup <- 
 sub('Training', 'Train',
 sub('Validation', 'Val',
 sampDesc$trainValGroup))

 # Shorten Dx
 sampDesc$Dx <- 
 sub('Benign liver lesions', 'Benign',
 sub('Liver cirrhosis', 'Cirrhosis',
 sampDesc$Dx))


 trainValGroupDX.tbl <-  
 with(sampDesc, 
 table(Dx_tissue=paste0(Dx,'_',tissue), trainValGroup, exclude=NULL))

 trainValGroupDX.tbl

 barplot(trainValGroupDX.tbl, beside=T, legend=T, 
    col=col_vec[1:nrow(trainValGroupDX.tbl)])
 title("Sample Counts by Tissue Type")


 # For consistency with previous code, we will use Outcome as an alias to Dx,
 # and sampID as an alias to geoAcc
 sampDesc$outcome <- sampDesc$Dx
 sampDesc$sampID <- sampDesc$geoAcc

 cat("Cai et al. combine Beign+Healthy and Cirrhosis+HCC\n")
 cat("Create secondary outcome\n")
 sampDesc$outcome2 <- with(sampDesc, 
 ifelse(Dx %in% c("Benign", "Healthy"), 'BenignHealthy',
 ifelse(Dx %in% c("Cirrhosis", "CHB"), 'CirrhosisCHB', Dx)))

 with(sampDesc, table(trainValGroup, outcome2, exclude=NULL))
 
 cat("Also want outcome3 == HCC or nonHCC\n")
 sampDesc$outcome3 <- with(sampDesc,
 ifelse(Dx == 'HCC', 'HCC', 'nonHCC'))

 with(sampDesc, table(trainValGroup, outcome3, exclude=NULL))

 # THIS DOESNT WORK
 #usethis::use_data(get(paste0(GSE_ID, '_sampDesc')), overwrite=T)

 # DO WE HAVE TO DO THIS?
 #GSE112679_sampDesc <- sampDesc
 #usethis::use_data(GSE112679_sampDesc, overwrite=T)

 # Don't save now.  Will put all data - sampDesc & counts - into one object!
 assign(paste0(GSE_ID, '_sampDesc'),sampDesc)
 save(list=paste0(GSE_ID, '_sampDesc'), 
      file=file.path(data_DIR, paste0(GSE_ID, '_sampDesc', '.rda')))
 rm(list=paste0(GSE_ID, '_sampDesc'))

```

```{r DTsampDesc}

 DT::datatable(sampDesc,  options=list(pageLength = 18))

```

